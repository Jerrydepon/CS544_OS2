--- noop-iosched.c	2018-05-06 02:06:29.291143000 -0700
+++ sstf-iosched.c	2018-05-06 02:02:40.025789827 -0700
@@ -1,5 +1,5 @@
 /*
- * elevator noop
+ * elevator sstf
  */
 #include <linux/blkdev.h>
 #include <linux/elevator.h>
@@ -8,41 +8,97 @@
 #include <linux/slab.h>
 #include <linux/init.h>
 
-struct noop_data {
+struct sstf_data {
 	struct list_head queue;
+	sector_t cur_header_pos;
 };
 
-static void noop_merged_requests(struct request_queue *q, struct request *rq,
+static void sstf_merged_requests(struct request_queue *q, struct request *rq,
 				 struct request *next)
 {
 	list_del_init(&next->queuelist);
 }
 
-static int noop_dispatch(struct request_queue *q, int force)
+static int sstf_dispatch(struct request_queue *q, int force)
 {
-	struct noop_data *nd = q->elevator->elevator_data;
-
+	struct sstf_data *nd = q->elevator->elevator_data;
+	sector_t min = 1<<31;
+	
 	if (!list_empty(&nd->queue)) {
+		struct list_head *list;
 		struct request *rq;
-		rq = list_entry(nd->queue.next, struct request, queuelist);
+		sector_t cur_pos;
+		
+		//Scan the whole request list to find the minimized value
+		list_for_each(list, &nd->queue) {
+			rq = list_entry(list, struct request, queuelist);
+
+			cur_pos = blk_rq_pos(rq);
+			
+			if (cur_pos > (nd->cur_header_pos)) {
+				printk(KERN_DEBUG "[SSTF]%lu\t",(unsigned long)(cur_pos-nd->cur_header_pos));
+				
+				if (min > (cur_pos - nd->cur_header_pos))
+					min = cur_pos - nd->cur_header_pos;
+			}
+			else {
+				printk(KERN_DEBUG "[SSTF]%lu\t", (unsigned long)(nd->cur_header_pos-cur_pos));
+				
+				if (min > (nd->cur_header_pos - cur_pos))
+					min = nd->cur_header_pos - cur_pos;
+			}
+		}
+
+		printk(KERN_DEBUG "\n[SSTF]Current minimized value is: %lu\n[SSTF]diff: ", (unsigned long)min);
+		
+		//Find the minimized node in request queue and break
+		list_for_each(list, &nd->queue) {
+			sector_t diff;
+
+			rq = list_entry(list, struct request, queuelist);
+
+			cur_pos = blk_rq_pos(rq);
+
+			if (cur_pos > (nd->cur_header_pos)) {
+				diff = cur_pos - nd->cur_header_pos;
+			}
+			else {
+				diff = nd->cur_header_pos - cur_pos;
+			}
+
+			printk(KERN_DEBUG "[SSTF]%lu\t", (unsigned long)diff);
+			
+			if (diff == min) {
+				break;
+			}
+		}
+
+		rq = list_entry(list, struct request, queuelist);
 		list_del_init(&rq->queuelist);
+		
+		printk(KERN_DEBUG "\n[SSTF]Before elv_dispatch_sort cur_pos: %lu\n", (unsigned long)cur_pos);
+
 		elv_dispatch_sort(q, rq);
+
+		nd->cur_header_pos = cur_pos;
+
 		return 1;
 	}
+
 	return 0;
 }
 
-static void noop_add_request(struct request_queue *q, struct request *rq)
+static void sstf_add_request(struct request_queue *q, struct request *rq)
 {
-	struct noop_data *nd = q->elevator->elevator_data;
+	struct sstf_data *nd = q->elevator->elevator_data;
 
 	list_add_tail(&rq->queuelist, &nd->queue);
 }
 
 static struct request *
-noop_former_request(struct request_queue *q, struct request *rq)
+sstf_former_request(struct request_queue *q, struct request *rq)
 {
-	struct noop_data *nd = q->elevator->elevator_data;
+	struct sstf_data *nd = q->elevator->elevator_data;
 
 	if (rq->queuelist.prev == &nd->queue)
 		return NULL;
@@ -50,18 +106,18 @@
 }
 
 static struct request *
-noop_latter_request(struct request_queue *q, struct request *rq)
+sstf_latter_request(struct request_queue *q, struct request *rq)
 {
-	struct noop_data *nd = q->elevator->elevator_data;
+	struct sstf_data *nd = q->elevator->elevator_data;
 
 	if (rq->queuelist.next == &nd->queue)
 		return NULL;
 	return list_entry(rq->queuelist.next, struct request, queuelist);
 }
 
-static int noop_init_queue(struct request_queue *q, struct elevator_type *e)
+static int sstf_init_queue(struct request_queue *q, struct elevator_type *e)
 {
-	struct noop_data *nd;
+	struct sstf_data *nd;
 	struct elevator_queue *eq;
 
 	eq = elevator_alloc(q, e);
@@ -83,42 +139,43 @@
 	return 0;
 }
 
-static void noop_exit_queue(struct elevator_queue *e)
+static void sstf_exit_queue(struct elevator_queue *e)
 {
-	struct noop_data *nd = e->elevator_data;
+	struct sstf_data *nd = e->elevator_data;
 
 	BUG_ON(!list_empty(&nd->queue));
 	kfree(nd);
 }
 
-static struct elevator_type elevator_noop = {
+static struct elevator_type elevator_sstf = {
 	.ops = {
-		.elevator_merge_req_fn		= noop_merged_requests,
-		.elevator_dispatch_fn		= noop_dispatch,
-		.elevator_add_req_fn		= noop_add_request,
-		.elevator_former_req_fn		= noop_former_request,
-		.elevator_latter_req_fn		= noop_latter_request,
-		.elevator_init_fn		= noop_init_queue,
-		.elevator_exit_fn		= noop_exit_queue,
+		.elevator_merge_req_fn		= sstf_merged_requests,
+		.elevator_dispatch_fn		= sstf_dispatch,
+		.elevator_add_req_fn		= sstf_add_request,
+		.elevator_former_req_fn		= sstf_former_request,
+		.elevator_latter_req_fn		= sstf_latter_request,
+		.elevator_init_fn		= sstf_init_queue,
+		.elevator_exit_fn		= sstf_exit_queue,
 	},
-	.elevator_name = "noop",
+	.elevator_name = "sstf",
 	.elevator_owner = THIS_MODULE,
 };
 
-static int __init noop_init(void)
+static int __init sstf_init(void)
 {
-	return elv_register(&elevator_noop);
+	return elv_register(&elevator_sstf);
 }
 
-static void __exit noop_exit(void)
+static void __exit sstf_exit(void)
 {
-	elv_unregister(&elevator_noop);
+	elv_unregister(&elevator_sstf);
 }
 
-module_init(noop_init);
-module_exit(noop_exit);
+module_init(sstf_init);
+module_exit(sstf_exit);
 
 
-MODULE_AUTHOR("Jens Axboe");
+MODULE_AUTHOR("Chao-Ting Wen, Chih-Hsiang Wang, .Suwadi");
 MODULE_LICENSE("GPL");
-MODULE_DESCRIPTION("No-op IO scheduler");
+MODULE_DESCRIPTION("SSTF IO scheduler");
+
